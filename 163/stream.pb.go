// Code generated by protoc-gen-gogo.
// source: stream.proto
// DO NOT EDIT!

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	stream.proto

It has these top-level messages:
	Packet
*/
package stream

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Packet struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GitTransport service

type GitTransportClient interface {
	ReceivePackStream(ctx context.Context, opts ...grpc.CallOption) (GitTransport_ReceivePackStreamClient, error)
	UploadPackStream(ctx context.Context, opts ...grpc.CallOption) (GitTransport_UploadPackStreamClient, error)
}

type gitTransportClient struct {
	cc *grpc.ClientConn
}

func NewGitTransportClient(cc *grpc.ClientConn) GitTransportClient {
	return &gitTransportClient{cc}
}

func (c *gitTransportClient) ReceivePackStream(ctx context.Context, opts ...grpc.CallOption) (GitTransport_ReceivePackStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GitTransport_serviceDesc.Streams[0], c.cc, "/stream.GitTransport/ReceivePackStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitTransportReceivePackStreamClient{stream}
	return x, nil
}

type GitTransport_ReceivePackStreamClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type gitTransportReceivePackStreamClient struct {
	grpc.ClientStream
}

func (x *gitTransportReceivePackStreamClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gitTransportReceivePackStreamClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitTransportClient) UploadPackStream(ctx context.Context, opts ...grpc.CallOption) (GitTransport_UploadPackStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GitTransport_serviceDesc.Streams[1], c.cc, "/stream.GitTransport/UploadPackStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitTransportUploadPackStreamClient{stream}
	return x, nil
}

type GitTransport_UploadPackStreamClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type gitTransportUploadPackStreamClient struct {
	grpc.ClientStream
}

func (x *gitTransportUploadPackStreamClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gitTransportUploadPackStreamClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GitTransport service

type GitTransportServer interface {
	ReceivePackStream(GitTransport_ReceivePackStreamServer) error
	UploadPackStream(GitTransport_UploadPackStreamServer) error
}

func RegisterGitTransportServer(s *grpc.Server, srv GitTransportServer) {
	s.RegisterService(&_GitTransport_serviceDesc, srv)
}

func _GitTransport_ReceivePackStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GitTransportServer).ReceivePackStream(&gitTransportReceivePackStreamServer{stream})
}

type GitTransport_ReceivePackStreamServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type gitTransportReceivePackStreamServer struct {
	grpc.ServerStream
}

func (x *gitTransportReceivePackStreamServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gitTransportReceivePackStreamServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GitTransport_UploadPackStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GitTransportServer).UploadPackStream(&gitTransportUploadPackStreamServer{stream})
}

type GitTransport_UploadPackStreamServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type gitTransportUploadPackStreamServer struct {
	grpc.ServerStream
}

func (x *gitTransportUploadPackStreamServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gitTransportUploadPackStreamServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GitTransport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.GitTransport",
	HandlerType: (*GitTransportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceivePackStream",
			Handler:       _GitTransport_ReceivePackStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadPackStream",
			Handler:       _GitTransport_UploadPackStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
