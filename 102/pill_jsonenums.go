// generated by jsonenums -type=Pill; DO NOT EDIT

package painkiller

import (
	"encoding/json"
	"fmt"
)

func (r Pill) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := map[Pill]string{
		Placebo: "Placebo", Aspirin: "Aspirin", Ibuprofen: "Ibuprofen", Paracetamol: "Paracetamol",
	}[r]
	if !ok {
		return nil, fmt.Errorf("invalid Pill: %d", r)
	}
	return json.Marshal(s)
}

var _PillNameToValue = map[string]Pill{
	"Placebo": Placebo, "Aspirin": Aspirin, "Ibuprofen": Ibuprofen, "Paracetamol": Paracetamol,
}

func init() {
	var v Pill
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PillNameToValue = map[string]Pill{
			interface{}(Placebo).(fmt.Stringer).String(): Placebo, interface{}(Aspirin).(fmt.Stringer).String(): Aspirin, interface{}(Ibuprofen).(fmt.Stringer).String(): Ibuprofen, interface{}(Paracetamol).(fmt.Stringer).String(): Paracetamol,
		}
	}
}

func (r *Pill) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Pill should be a string, got %s", data)
	}
	v, ok := _PillNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Pill %q", s)
	}
	*r = v
	return nil
}
